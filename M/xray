#!/bin/bash
# Script de Instalação e Gerenciamento do Xray
# Autor: Claude
# Versão: 1.0

# Cores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Funções
check_root() {
    if [[ $EUID -ne 0 ]]; then
        echo -e "${RED}Este script precisa ser executado como root${NC}"
        exit 1
    fi
}

install_xray() {
    echo -e "${YELLOW}Instalando Xray...${NC}"
    
    # Instalar dependências
    apt update
    apt install -y curl wget unzip
    
    # Download e instalação do Xray
    mkdir -p /usr/local/xray
    wget -O /usr/local/xray/xray.zip https://github.com/XTLS/Xray-core/releases/latest/download/Xray-linux-64.zip
    unzip /usr/local/xray/xray.zip -d /usr/local/xray/
    chmod +x /usr/local/xray/xray
    
    # Criar diretório de configuração
    mkdir -p /usr/local/etc/xray
    
    # Criar arquivo de configuração básico
    cat > /usr/local/etc/xray/config.json << EOF
{
  "log": {
    "loglevel": "warning"
  },
  "inbounds": [
    {
      "port": 10086,
      "protocol": "vmess",
      "settings": {
        "clients": []
      },
      "streamSettings": {
        "network": "tcp"
      }
    }
  ],
  "outbounds": [
    {
      "protocol": "freedom",
      "settings": {}
    }
  ]
}
EOF

    # Criar serviço systemd
    cat > /etc/systemd/system/xray.service << EOF
[Unit]
Description=Xray Service
After=network.target

[Service]
ExecStart=/usr/local/xray/xray -config /usr/local/etc/xray/config.json
Restart=on-failure
RestartSec=10s

[Install]
WantedBy=multi-user.target
EOF

    # Recarregar systemd e iniciar serviço
    systemctl daemon-reload
    systemctl enable xray
    systemctl start xray
    
    echo -e "${GREEN}Xray instalado com sucesso!${NC}"
    sleep 2
    menu_xray
}

uninstall_xray() {
    echo -e "${YELLOW}Desinstalando Xray...${NC}"
    
    systemctl stop xray
    systemctl disable xray
    rm -f /etc/systemd/system/xray.service
    rm -rf /usr/local/xray
    rm -rf /usr/local/etc/xray
    
    echo -e "${GREEN}Xray desinstalado com sucesso!${NC}"
    sleep 2
    menu_xray
}

add_user() {
    echo -e "${YELLOW}Adicionando novo usuário...${NC}"
    
    # Gerar UUID
    UUID=$(cat /proc/sys/kernel/random/uuid)
    
    # Adicionar usuário ao config.json
    # Implementar lógica de adição de usuário
    
    echo -e "${GREEN}Usuário adicionado com sucesso!${NC}"
    echo -e "UUID: ${UUID}"
    sleep 2
    menu_xray
}

remove_user() {
    echo -e "${YELLOW}Removendo usuário...${NC}"
    
    # Implementar lógica de remoção de usuário
    
    echo -e "${GREEN}Usuário removido com sucesso!${NC}"
    sleep 2
    menu_xray
}

show_status() {
    echo -e "${YELLOW}Status do Xray:${NC}"
    systemctl status xray
    sleep 2
    menu_xray
}

configure_websocket() {
    echo -e "${YELLOW}Configurando WebSocket...${NC}"
    
    # Implementar lógica de configuração do WebSocket
    
    echo -e "${GREEN}WebSocket configurado com sucesso!${NC}"
    sleep 2
    menu_xray
}

configure_tls() {
    echo -e "${YELLOW}Configurando TLS...${NC}"
    
    # Implementar lógica de configuração do TLS
    
    echo -e "${GREEN}TLS configurado com sucesso!${NC}"
    sleep 2
    menu_xray
}

configure_port() {
    echo -e "${YELLOW}Configurando porta...${NC}"
    read -p "Digite a nova porta: " port
    # Implementar alteração de porta
    echo -e "${GREEN}Porta alterada com sucesso!${NC}"
    sleep 2
    menu_xray
}

backup_restore() {
    echo -e "${YELLOW}Backup/Restore...${NC}"
    
    # Implementar lógica de backup e restore
    
    echo -e "${GREEN}Backup/Restore concluído com sucesso!${NC}"
    sleep 2
    menu_xray
}

# Menu principal
menu_xray() {
    clear
    echo -e "\E[44;1;37m              GERENCIAMENTO XRAY               \E[0m"
    echo -e "\033[1;32m[\033[1;36m01\033[1;32m] \033[1;37m• \033[1;33mINSTALAR XRAY \033[1;32m"
    echo -e "\033[1;32m[\033[1;36m02\033[1;32m] \033[1;37m• \033[1;33mALTERAR PORTA \033[1;32m"
    echo -e "\033[1;32m[\033[1;36m03\033[1;32m] \033[1;37m• \033[1;33mADICIONAR USUARIO \033[1;32m"
show_menu() {
    echo -e "\n${GREEN}=== Menu de Gerenciamento Xray ===${NC}"
    echo -e "1. Instalar Xray"
    echo -e "2. Desinstalar Xray"
    echo -e "3. Adicionar usuário"
    echo -e "4. Remover usuário"
    echo -e "5. Ver status"
    echo -e "6. Configurar WebSocket"
    echo -e "7. Configurar TLS"
    echo -e "8. Configurar Porta"
    echo -e "9. Backup/Restore"
    echo -e "10. Sair"
    echo -e "\nEscolha uma opção: "
}

# Loop principal
while true; do
    show_menu
    read -p "Opção: " choice
    
    case $choice in
        1) install_xray ;;
        2) uninstall_xray ;;
        3) add_user ;;
        4) remove_user ;;
        5) show_status ;;
        6) configure_websocket ;;
        7) configure_tls ;;
        8) configure_port ;;
        9) backup_restore ;;
        10) exit 0 ;;
        *) echo -e "${RED}Opção inválida${NC}" ;;
    esac
done 