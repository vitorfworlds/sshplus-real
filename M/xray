#!/bin/bash
# Script de Instalação e Gerenciamento do Xray
# Autor: Claude
# Versão: 1.0

# Cores
RED='\033[1;31m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
CYAN='\033[1;36m'
CORTITLE='\033[1;41m'
DIR='/etc/SSHPlus'
SCOLOR='\033[0m'

# Verifica se o Xray já está instalado
if [[ -e /usr/local/bin/xray ]]; then
    clear
    echo -e "\033[1;33mO XRAY JÁ ESTÁ INSTALADO!\033[0m"
    sleep 2
    conexao
    exit 1
fi

# Instala dependências
apt update -y
apt install curl socat -y

# Baixa e instala o Xray
bash -c "$(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)" @ install

# Verifica se a instalação foi bem sucedida
if [[ ! -e /usr/local/bin/xray ]]; then
    clear
    echo -e "${RED}ERRO AO INSTALAR XRAY!${SCOLOR}"
    sleep 2
    conexao
    exit 1
fi

# Cria diretório de configuração se não existir
mkdir -p /usr/local/etc/xray

# Configuração básica do Xray
cat > /usr/local/etc/xray/config.json << EOF
{
  "inbounds": [{
    "port": 443,
    "protocol": "vless",
    "settings": {
      "clients": [],
      "decryption": "none"
    },
    "streamSettings": {
      "network": "tcp",
      "security": "tls",
      "tlsSettings": {
        "certificates": []
      }
    }
  }],
  "outbounds": [{
    "protocol": "freedom",
    "settings": {}
  }]
}
EOF

# Inicia o serviço
systemctl start xray
systemctl enable xray

clear
echo -e "${GREEN}XRAY INSTALADO COM SUCESSO!${SCOLOR}"
sleep 2
conexao

# Funções
check_root() {
    if [[ $EUID -ne 0 ]]; then
        echo -e "${RED}Este script precisa ser executado como root${NC}"
        exit 1
    fi
}

uninstall_xray() {
    echo -e "${YELLOW}Desinstalando Xray...${NC}"
    
    systemctl stop xray
    systemctl disable xray
    rm -f /etc/systemd/system/xray.service
    rm -rf /usr/local/xray
    rm -rf /usr/local/etc/xray
    
    echo -e "${GREEN}Xray desinstalado com sucesso!${NC}"
    sleep 2
    menu_xray
}

add_user() {
    echo -e "${YELLOW}Adicionando novo usuário...${NC}"
    
    # Gerar UUID
    UUID=$(cat /proc/sys/kernel/random/uuid)
    
    # Adicionar usuário ao config.json
    # Implementar lógica de adição de usuário
    
    echo -e "${GREEN}Usuário adicionado com sucesso!${NC}"
    echo -e "UUID: ${UUID}"
    sleep 2
    menu_xray
}

remove_user() {
    echo -e "${YELLOW}Removendo usuário...${NC}"
    
    # Implementar lógica de remoção de usuário
    
    echo -e "${GREEN}Usuário removido com sucesso!${NC}"
    sleep 2
    menu_xray
}

show_status() {
    echo -e "${YELLOW}Status do Xray:${NC}"
    systemctl status xray
    sleep 2
    menu_xray
}

configure_websocket() {
    echo -e "${YELLOW}Configurando WebSocket...${NC}"
    
    # Implementar lógica de configuração do WebSocket
    
    echo -e "${GREEN}WebSocket configurado com sucesso!${NC}"
    sleep 2
    menu_xray
}

configure_tls() {
    echo -e "${YELLOW}Configurando TLS...${NC}"
    
    # Implementar lógica de configuração do TLS
    
    echo -e "${GREEN}TLS configurado com sucesso!${NC}"
    sleep 2
    menu_xray
}

configure_port() {
    echo -e "${YELLOW}Configurando porta...${NC}"
    read -p "Digite a nova porta: " port
    # Implementar alteração de porta
    echo -e "${GREEN}Porta alterada com sucesso!${NC}"
    sleep 2
    menu_xray
}

backup_restore() {
    echo -e "${YELLOW}Backup/Restore...${NC}"
    
    # Implementar lógica de backup e restore
    
    echo -e "${GREEN}Backup/Restore concluído com sucesso!${NC}"
    sleep 2
    menu_xray
}

# Menu principal
menu_xray() {
    clear
    echo -e "\E[44;1;37m              GERENCIAMENTO XRAY               \E[0m"
    echo -e "\033[1;32m[\033[1;36m01\033[1;32m] \033[1;37m• \033[1;33mINSTALAR XRAY \033[1;32m"
    echo -e "\033[1;32m[\033[1;36m02\033[1;32m] \033[1;37m• \033[1;33mALTERAR PORTA \033[1;32m"
    echo -e "\033[1;32m[\033[1;36m03\033[1;32m] \033[1;37m• \033[1;33mADICIONAR USUARIO \033[1;32m"
    echo -e "\033[1;32m[\033[1;36m04\033[1;32m] \033[1;37m• \033[1;33mREMOVER USUARIO \033[1;32m"
    echo -e "\033[1;32m[\033[1;36m05\033[1;32m] \033[1;37m• \033[1;33mVER STATUS \033[1;32m"
    echo -e "\033[1;32m[\033[1;36m06\033[1;32m] \033[1;37m• \033[1;33mCONFIGURAR WEBSOCKET \033[1;32m"
    echo -e "\033[1;32m[\033[1;36m07\033[1;32m] \033[1;37m• \033[1;33mCONFIGURAR TLS \033[1;32m"
    echo -e "\033[1;32m[\033[1;36m08\033[1;32m] \033[1;37m• \033[1;33mCONFIGURAR PORTA \033[1;32m"
    echo -e "\033[1;32m[\033[1;36m09\033[1;32m] \033[1;37m• \033[1;33mBACKUP/RESTORE \033[1;32m"
    echo -e "\033[1;32m[\033[1;36m10\033[1;32m] \033[1;37m• \033[1;33mSAIR \033[1;32m"
    echo -e "\nEscolha uma opção: "
}

# Loop principal
while true; do
    show_menu
    read -p "Opção: " choice
    
    case $choice in
        1) install_xray ;;
        2) uninstall_xray ;;
        3) add_user ;;
        4) remove_user ;;
        5) show_status ;;
        6) configure_websocket ;;
        7) configure_tls ;;
        8) configure_port ;;
        9) backup_restore ;;
        10) exit 0 ;;
        *) echo -e "${RED}Opção inválida${NC}" ;;
    esac
done 